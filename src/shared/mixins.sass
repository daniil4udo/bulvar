//
// Additional @mixins for bulma-buefy-css-variables
//

=control-sizes($variable-name: null)
    @if $variable-name
        &.is-small 
            --#{$variable-name}: var(--size-small, #{$size-small})
        &.is-medium 
            --#{$variable-name}: var(--size-medium, #{$size-medium})
        &.is-large 
            --#{$variable-name}: var(--size-large, #{$size-large})
    @else
        &.is-small
            +control-small
        &.is-mediu
            +control-medium
        &.is-large
            +control-large


// 🧩 register :export {}

=exportCSSVar($name, $value)
  @if $export
    @at-root :export
      #{camel-case($name)}: #{$value}

=exportCSSVars($list)
  @if $export
    @at-root :export
      @each $name, $value in $list
        #{camel-case($name)}: #{$value}

// 🧩 register var() base on $at-root flag

=registerCSSVar($name, $value, $at-root: true)
  @if $at-root
    @at-root :root
      --#{$name}: #{$value}
  @else
    --#{$name}: #{$value}

=registerCSSVars($list, $at-root: true)
  @if $at-root
    @at-root :root
      @each $name, $value in $list
        --#{$name}: #{$value}
  @else
    @each $name, $value in $list
      --#{$name}: #{$value}

// 🧩 register var() JUST(⚠️) for colors in $colors map

=registerCSSVarColor($name, $components, $prefix: '')
  $color: nth($components, 1)
  $base: $prefix + $name

  --#{$base}-h: #{hue($color)}
  --#{$base}-s: #{saturation($color)}
  --#{$base}-l: #{lightness($color)}
  --#{$base}-a: 1
  --#{$base}: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-l), var(--#{$base}-a))

  // Invert color
  $color-invert: nth($components, 2)
  --#{$base}-invert: #{$color-invert}

  // Light color
  $color-light: if(length($components) >= 3, nth($components, 3), findLightColor($color))
  $light-l: lightness($color-light)
  --#{$base}-light-l: #{$light-l}
  --#{$base}-light: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-light-l), var(--#{$base}-a))

  // Dark color
  $color-dark: if(length($components) >= 4, nth($components, 4), findDarkColor($color))
  $dark-l: lightness($color-dark)
  --#{$base}-dark-l: #{$dark-l}
  --#{$base}-dark: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-dark-l), var(--#{$base}-a))

=registerCSSVarColors($colors, $prefix: '')
  @each $name, $components in $colors
    +registerCSSVarColor($name, $components, $prefix)

// If declare variables only in component's root selector, i.e. .card
// .card-item, .card-header etc. wont have acces to CSS Vars due to the scoping
// so if $at-root is false, use starts-with selector

// turns list of string that represent root casses
// i.e. ('tag', 'tags')
// into ('.tag', 'class^=tag', '.tags', 'class^=tags')
// to use as dynamic selector
=registerComponentCSSVars($component-class, $map: $css-vars-map, $has-starts-from: true)
  $list: if(type-of($component-class) == 'list', $component-class, ($component-class))
  $new-list: ()

  @each $name in $component-class
    $new-list: append($new-list, '.#{$name}', comma)
    @if $has-starts-from
      $new-list: append($new-list, '[class^=#{$name}-]', comma)

  #{$new-list}
    +registerCSSVars($map, $at-root)
