//
// Additional @funtion for bulvar
//

/// Convert string to came case
@function camel-case($str)
  $camelCase: ''
  $prevCharWasDash: false
  @for $i from 1 to str-length($str) + 1
    $char: str-slice($str, $i, $i)
    @if $char == '-'
      // If $prevCharWasDash is true, then we've encountered a double dash '--'
      @if $prevCharWasDash
        // Turn double dashes into single dashes
        $camelCase: $camelCase + '-'
        $prevCharWasDash: false
      @else
        // This is a single dash. Skip adding it to the string and uppercase the next
        // character.
        $prevCharWasDash: true
    @else if $prevCharWasDash
      // The current $char is not a dash. If the previous character
      // was a dash and we should uppercase this char.
      $camelCase: $camelCase + to-upper-case($char)
      $prevCharWasDash: false
    @else
      // Add current $char as-is
      $camelCase: $camelCase + $char
      $prevCharWasDash: false

  @return $camelCase

// assign variable to a property
// base on $css-variables flag
@function assign($name-or-value, $fallback, $force-fallback: false)
  @if $css-variables
    @if $force-fallback
      @return var(--#{$name-or-value}, #{$fallback})
    @else
      @return var(--#{$name-or-value})
  @else 
    @return $fallback

// extracts var(--var-name) -> var-name
@function unwrap($variable)
  @if type-of($variable) == 'string' and str-index($variable, "var(") == 1
    $start-at: str-index($variable, "--") + str-length("--")
    $end-at: (str-index($variable, ',') or -1) - 1
    @return str-slice($variable, $start-at, $end-at)
  @return $variable

@function bulmaToRGB($color)
  @if type-of($color) != 'color'
      @return $color
  @return red($color), green($color), blue($color)

/// lighten & darken with css vars

@function bulmaVarOpacity($color, $alpha)
  $name: unwrap($color)
  @if type-of($name) == 'string'
    @return hsla(#{var(--#{$name}-h)}, #{var(--#{$name}-s)}, #{var(--#{$name}-l)}, #{$alpha})
  @return $color

@function bulmaVarLighteness($color, $amount)
  $name: unwrap($color)
  @if type-of($name) == 'string' // and map-has-key($colors, $name)
    @return hsla(#{var(--#{$name}-h)}, #{var(--#{$name}-s)}, #{$amount}, #{var(--#{$name}-a)})
  @return $color

@function bulmaVarLighten($color, $amount)
  $name: unwrap($color)
  @if type-of($name) == 'string' // and map-has-key($colors, $name)
    $name-l: calc(#{var(--#{$name}-l)} + #{if(unitless($amount), ($amount * 1%), $amount)})
    @return hsla(#{var(--#{$name}-h)}, #{var(--#{$name}-s)}, #{$name-l}, #{var(--#{$name}-a)})
  @return $color

@function bulmaVarDarken($color, $amount)
  @return bulmaVarLighten($color, ($amount * -1))

/// function color helpres

@function schemeInvertRgba($alpha)
    @return rgba(var(--scheme-invert-rgb, #{bulmaToRGB($scheme-invert)}), $alpha)

@function borderInvertRgba($alpha)
    @return rgba(var(--border-rgb, #{bulmaToRGB($border)}), $alpha)

@function linkInvertRgba($alpha)
    @return rgba(var(--link-rgb, #{bulmaToRGB($link)}), $alpha)
