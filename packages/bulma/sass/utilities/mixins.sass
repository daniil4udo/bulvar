@use "sass:color"
@use "sass:list"
@use "sass:map"
@use "sass:meta"
@use "sass:string"

@use "derived-variables" as vars
@use "functions" as fn
@use "mixins-scss"

=clearfix
  &::after
    clear: both
    content: " "
    display: table

=center($width, $height: 0)
  position: absolute
  @if $height != 0
    +logical-x(inset, calc(50% - ($width * 0.5)), $right: false)
    top: calc(50% - ($height * 0.5))
  @else
    +logical-x(inset, calc(50% - ($width * 0.5)), $right: false)
    top: calc(50% - ($width * 0.5))

=fa($size, $dimensions)
  --fa-dimensions: #{$dimensions}
  --fa-font-size: #{$size}
  display: inline-block
  font-size: var(--fa-font-size)
  height: var(--fa-dimensions)
  line-height: var(--fa-dimensions)
  text-align: center
  vertical-align: top
  width: var(--fa-dimensions)

=burger($dimensions: var(--navbar-height), $color: var(--scheme-main))
  --burger-color: #{$color}
  --burger-dimensions: #{$dimensions}
  --burger-gap: 5px
  --burger-item-height: 0.125rem
  --burger-item-width: 1.125rem
  align-items: center
  appearance: none
  background: none
  border: none
  color: var(--burger-color)
  cursor: pointer
  display: inline-flex
  flex-direction: column;
  flex-shrink: 0;
  height: var(--burger-dimensions)
  justify-content: center;
  position: relative
  vertical-align: top;
  width: var(--burger-dimensions)
  span
    background-color: currentColor
    display: block
    height: var(--burger-item-height)
    +logical-x(inset, calc(50% - calc(50% - calc(var(--burger-item-width)) / 2)), $right: false)
    position: absolute
    transform-origin: center
    transition-duration: var(--duration)
    transition-property: background-color, color, opacity, transform
    transition-timing-function: var(--easing)
    width: var(--burger-item-width)
    &:nth-child(1),
    &:nth-child(2)
      top: calc(50% - calc(var(--burger-item-height)) / 2)
    &:nth-child(3)
      bottom: calc(50% + var(--burger-gap))
    &:nth-child(4)
      top: calc(50% + var(--burger-gap));
  &:hover
    background-color: #{mixins-scss.set-color-alpha(var(--burger-color), 0.1)}
  // Modifiers
  &:is(:active, .is-active)
    background-color: #{mixins-scss.set-color-alpha(var(--burger-color), 0.2)}
    span
      &:nth-child(1)
        transform: rotate(-45deg)
      &:nth-child(2)
        transform: rotate(45deg)
      &:nth-child(3),
      &:nth-child(4)
        opacity: 0

=overflow-touch
  -webkit-overflow-scrolling: touch

=placeholder
    //   &:is(::placeholder, :-moz-placeholder, ::-moz-placeholder, :-ms-input-placeholder, ::-webkit-input-placeholder)
    &::placeholder
      @content

=reset
  appearance: none
  background: none
  border: none
  color: currentColor
  font-family: inherit
  font-size: 1em
  margin: 0
  padding: 0

=typography-size($target:'')
  @each $size in vars.$sizes
    $i: list.index(vars.$sizes, $size)
    .is-size-#{$i}#{if($target == '', '', '-' + $target)}
      font-size: $size !important

// Responsiveness

=from($device)
  @media screen and (min-width: $device)
    @content

=until($device)
  @media screen and (max-width: $device - 1px)
    @content

=between($from, $until)
  @media screen and (min-width: $from) and (max-width: $until - 1px)
    @content

=mobile
  @media screen and (max-width: vars.$tablet - 1px)
    @content

=tablet
  @media screen and (min-width: vars.$tablet), print
    @content

=tablet-only
  @media screen and (min-width: vars.$tablet) and (max-width: vars.$desktop - 1px)
    @content

=touch
  @media screen and (max-width: vars.$desktop - 1px)
    @content

=desktop
  @media screen and (min-width: vars.$desktop)
    @content

=desktop-only
  @if vars.$widescreen-enabled
    @media screen and (min-width: vars.$desktop) and (max-width: vars.$widescreen - 1px)
      @content

=until-widescreen
  @if vars.$widescreen-enabled
    @media screen and (max-width: vars.$widescreen - 1px)
      @content

=widescreen
  @if vars.$widescreen-enabled
    @media screen and (min-width: vars.$widescreen)
      @content

=widescreen-only
  @if vars.$widescreen-enabled and vars.$fullhd-enabled
    @media screen and (min-width: vars.$widescreen) and (max-width: vars.$fullhd - 1px)
      @content

=is($classes...)
  @if vars.$use-is
    :is(#{$classes})
      @content
  @else
    #{$classes}
      @content

=is-parent($classes...)
  @if vars.$use-is
    &:is(#{$classes})
      @content
  @else
    #{$classes}
      @content

=until-fullhd
  @if vars.$fullhd-enabled
    @media screen and (max-width: vars.$fullhd - 1px)
      @content

=fullhd
  @if vars.$fullhd-enabled
    @media screen and (min-width: vars.$fullhd)
      @content

=ie11
  @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none)
    @content

=breakpoint($name)
  $breakpoint: map.get(vars.$breakpoints, $name)
  @if $breakpoint
    $from: map.get($breakpoint, "from")
    $until: map.get($breakpoint, "until")
    @if $from and $until
      +between($from, $until)
        @content
    @else if $from
      +from($from)
        @content
    @else if $until
      +until($until)
        @content

=ltr
  @if not vars.$rtl
    @content

=rtl
  @if vars.$rtl
    @content

=logical-border-radius($args...)
  // Define allowed corner values
  $list-of-directions: ("top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left") !default
  $list: list.join($list-of-directions, ("cross-left", "cross-right", "all"))

  // Fix logical property mapping
  $position-top: if(vars.$logical, "start", "top")
  $position-bottom: if(vars.$logical, "end", "bottom")
  $position-left: if(vars.$logical, "start", "left")
  $position-right: if(vars.$logical, "end", "right")

  // Handle different argument patterns
  @if list.length($args) == 1
    // Single value - apply to all corners
    $value: list.nth($args, 1)
    border-radius: fn.null($value, space)

  @else if list.length($args) == 2
    // Two values - corner specification + radius value
    $corner: list.nth($args, 1)
    $value: list.nth($args, 2)

    @if list.index($list, $corner)
      @if $corner == "top"
        border-#{$position-top}-#{$position-left}-radius: $value
        border-#{$position-top}-#{$position-right}-radius: $value
      @else if $corner == "top-right"
        border-#{$position-top}-#{$position-right}-radius: $value
      @else if $corner == "right"
        border-#{$position-top}-#{$position-right}-radius: $value
        border-#{$position-bottom}-#{$position-right}-radius: $value
      @else if $corner == "bottom-right"
        border-#{$position-bottom}-#{$position-right}-radius: $value
      @else if $corner == "bottom"
        border-#{$position-bottom}-#{$position-left}-radius: $value
        border-#{$position-bottom}-#{$position-right}-radius: $value
      @else if $corner == "bottom-left"
        border-#{$position-bottom}-#{$position-left}-radius: $value
      @else if $corner == "left"
        border-#{$position-top}-#{$position-left}-radius: $value
        border-#{$position-bottom}-#{$position-left}-radius: $value
      @else if $corner == "top-left"
        border-#{$position-top}-#{$position-left}-radius: $value
      @else if $corner == "all"
        border-radius: $value
      @else if $corner == "cross-left"
        border-#{$position-top}-#{$position-left}-radius: $value
        border-#{$position-bottom}-#{$position-right}-radius: $value
      @else if $corner == "cross-right"
        border-#{$position-top}-#{$position-right}-radius: $value
        border-#{$position-bottom}-#{$position-left}-radius: $value
    @else
      @error "Corner value must be one of the following: #{$list}."

  @else if list.length($args) == 4
    // Four values - individual corner radii (top-left, top-right, bottom-right, bottom-left)
    $processed-args: fn.null($args, space, true)
    border-#{$position-top}-#{$position-left}-radius: list.nth($processed-args, 1)
    border-#{$position-top}-#{$position-right}-radius: list.nth($processed-args, 2)
    border-#{$position-bottom}-#{$position-right}-radius: list.nth($processed-args, 3)
    border-#{$position-bottom}-#{$position-left}-radius: list.nth($processed-args, 4)

  @else
    @error "Invalid number of arguments. Expected 1, 2, or 4 arguments, got #{list.length($args)}."

=logical-x($property, $spacing, $right: null)
  @if $right == null
    #{$property}-inline: $spacing;  // Shorthand when $right not specified
  @else
    $position: if($right, "end", "start")
    #{$property}-inline-#{$position}: $spacing

=logical-y($property, $spacing, $bottom: null)
  @if $bottom == null
    #{$property}-block: $spacing;  // Shorthand when $bottom not specified
  @else
    $position: if($bottom, "end", "start")
    #{$property}-block-#{$position}: $spacing

// Placeholders

=unselectable
  user-select: none

=arrow($color: transparent)
  --arrow-color: #{$color}
  border: 0.125em solid var(--arrow-color)
  border-radius: 2px
  +logical-x(border, 0, $right: true);
  border-top: 0
  content: " "
  display: block
  height: 0.625em
  +logical-y(margin, -0.4375em, $bottom: false)
  pointer-events: none
  position: absolute
  top: 50%
  transform: rotate(-45deg)
  transform-origin: center
  transition-duration: var(--duration)
  transition-property: border-color;
  width: 0.625em

=block($spacing: vars.$block-spacing)
  &:not(:last-child)
    +logical-y(margin, var(--block-spacing), $bottom: true)

=delete
  --delete-height: 20px
  --delete-width: 20px
  --delete-color: var(--scheme-main)
  --delete-background-color: var(--scheme-invert)
  @extend %unselectable
  appearance: none
  background-color: #{mixins-scss.set-color-alpha(var(--delete-background-color), 0.5)}
  border: none
  border-radius: var(--radius-rounded)
  cursor: pointer
  pointer-events: auto
  display: inline-flex
  flex-grow: 0
  flex-shrink: 0
  font-size: 1em
  height: var(--delete-height)
  max-height: var(--delete-height)
  max-width: var(--delete-width)
  width: var(--delete-width)
  min-height: var(--delete-height)
  min-width: var(--delete-width)
  outline: none
  position: relative
  vertical-align: top
  &::before,
  &::after
    background-color: var(--delete-color)
    content: ""
    display: block
    +logical-x(inset, 50%, $right: false)
    position: absolute
    top: 50%
    transform: translateX(-50%) translateY(-50%) rotate(45deg)
    transform-origin: center center
  &::before
    height: 2px
    width: 50%
  &::after
    height: 50%
    width: 2px
  &:is(:hover, :focus)
    background-color: #{mixins-scss.set-color-alpha(var(--scheme-invert), 0.3)}
  &:active
    background-color: #{mixins-scss.set-color-alpha(var(--scheme-invert), 0.4)}
  // Sizes
  &.is-small
    --delete-height: 1rem
    --delete-width: 1rem
  &.is-medium
    --delete-height: 1.5rem
    --delete-width: 1.5rem
  &.is-large
    --delete-height: 2rem
    --delete-width: 2rem

=loader
  --loader-color: var(--grey-lighter)
  --loader-radius: var(--radius-rounded)
  animation: spinAround 500ms infinite linear
  border: 2px solid var(--loader-color)
  border-radius: var(--loader-radius)
  border-inline-end-color: transparent
  border-top-color: transparent
  content: ""
  display: block
  height: 1em
  position: relative
  width: 1em

=overlay($offset: 0)
  position: absolute
  inset: $offset

//
// Additional @mixins for bulvar
//

=sizes($target:'')
  @each $size in vars.$sizes
    $i: list.index(vars.$sizes, $size)
    &.is-#{$i}
      font-size: $size

// 🧩 register :export {}

=exportCSSVar($name, $value)
  @if vars.$export
    @at-root :export
      #{fn.camel-case($name)}: #{$value}

=exportCSSVars($list)
  @if vars.$export
    @at-root :export
      @each $name, $value in $list
        #{fn.camel-case($name)}: #{$value}

// 🧩 register var() base on $at-root flag

=registerCSSVar($name, $value, $at-root: true)
  @if $at-root
    @at-root :root
      --#{$name}: #{$value}
  @else
    --#{$name}: #{$value}

=registerCSSVars($list, $at-root: true)
  @if $at-root
    @at-root :root
      @each $name, $value in $list
        --#{$name}: #{$value}
  @else
    @each $name, $value in $list
      --#{$name}: #{$value}

// 🧩 register var() JUST(⚠️) for colors in $colors map

=registerCSSVarColor($name, $components, $prefix: '')
  $base: $prefix + $name

  // Base color
  $color: list.nth($components, 1)
  --#{$base}-h: #{color.channel($color, "hue", $space: hsl)}
  --#{$base}-s: #{color.channel($color, "saturation", $space: hsl)}
  --#{$base}-l: #{color.channel($color, "lightness", $space: hsl)}
  --#{$base}-a: 1
  --#{$base}: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-l), var(--#{$base}-a))

  // Invert color
  $color-invert: list.nth($components, 2)
  --#{$base}-invert: #{$color-invert}
  @if meta.type-of($color-invert) == 'color'
    --#{$base}-invert-bis: #{fn.findColorState($color-invert, 5%)}
    --#{$base}-invert-ter: #{fn.findColorState($color-invert, 10%)}
  @else
    --#{$base}-invert-bis: var(--#{fn.unwrap($color-invert)}-bis)
    --#{$base}-invert-ter: var(--#{fn.unwrap($color-invert)}-ter)

  // Light color
  $color-light: if(list.length($components) >= 3, list.nth($components, 3), fn.findLightColor($color))
  $light-l: color.channel($color-light, "lightness", $space: hsl)
  --#{$base}-light-l: #{$light-l}
  --#{$base}-light: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-light-l), var(--#{$base}-a))

  // Dark color
  $color-dark: if(list.length($components) >= 4, list.nth($components, 4), fn.findDarkColor($color))
  $dark-l: color.channel($color-dark, "lightness", $space: hsl)
  --#{$base}-dark-l: #{$dark-l}
  --#{$base}-dark: hsla(var(--#{$base}-h), var(--#{$base}-s), var(--#{$base}-dark-l), var(--#{$base}-a))

=registerCSSVarColors($colors, $prefix: '')
  @each $name, $components in $colors
    +mixins-scss.register-color-system($name, $components, $prefix)

// If declare variables only in component's root selector, i.e. .card
// .card-item, .card-header etc. wont have access to CSS Vars due to the scoping
// so if $at-root is false, use starts-with selector

// turns list of string that represent root cases
// i.e. ('tag', 'tags')
// into ('.tag', 'class^=tag', '.tags', 'class^=tags')
// to use as dynamic selector
=registerComponentCSSVars($component-class, $map, $has-starts-from: true)
  @if $component-class == null or $component-class == ''
    +registerCSSVars($map, $at-root: true)
  @else
    $list: if(meta.type-of($component-class) == 'list', $component-class, ($component-class))
    $new-list: ()

    @each $name in $component-class
      $new-list: list.append($new-list, '.#{$name}', comma)
      @if $has-starts-from
        $new-list: list.append($new-list, '[class^=#{$name}-]', comma)

    #{$new-list}
      +registerCSSVars($map, $at-root: vars.$at-root)
