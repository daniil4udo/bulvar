@use "sass:list";

@use "../../../bulma/sass/utilities" as bulma-utilities;
@use "../../../bulma/sass/form/shared" as bulma-form;

$radio-active-background-color: var(--primary) !default;
$radio-size: 1.25em !default;

$radio-colors: bulma-form.$form-colors !default;

// Map Local variables
$-css-vars-map: (
    "radio-active-background-color": $radio-active-background-color,
    "radio-size": $radio-size,
);

// Register & Export CSS Variabless
@include bulma-utilities.exportCSSVars($-css-vars-map);
@include bulma-utilities.registerComponentCSSVars("b-radio", $-css-vars-map);

.b-radio {
    &.radio {
        @extend %unselectable;
        display: inline-flex;
        align-items: center;
        outline: none;
        &:not(.button) {
            @include bulma-utilities.ltr-property("margin", 0.5em);
            & + .radio:last-child {
                @include bulma-utilities.ltr-property("margin", 0);
            }
        }
        // reset Bulma
        & + .radio {
            @include bulma-utilities.ltr-property("margin", 0, false);
        }
        input[type=radio] {
            position: absolute;
            z-index: -1;
            left: 0;
            opacity: 0;
            outline: none;
            + .check {
                position: relative;
                display: flex;
                width: var(--radio-size);
                height: var(--radio-size);
                flex-shrink: 0;
                border: 2px solid var(--grey);
                border-radius: 50%;
                cursor: pointer;
                transition: background calc(var(--speed) * 2) var(--easing);
                &::before {
                    position: absolute;
                    bottom: 50%;
                    left: 50%;
                    display: flex;
                    width: var(--radio-size);
                    height: var(--radio-size);
                    border-radius: 50%;
                    margin-bottom: calc(-0.5 * var(--radio-size));
                    margin-left: calc(-0.5 * var(--radio-size));
                    background-color: var(--radio-active-background-color);
                    content: "";
                    transform: scale(0);
                    transition: transform calc(var(--speed) * 2) var(--easing);
                    @include bulma-utilities.ltr-property("margin", calc(-0.5 * var(--radio-size)), false);
                }
                @each $name, $pair in $radio-colors {
                    $color: list.nth($pair, 1);
                    &.is-#{$name}:before {
                        background: var(--#{$name});
                    }
                }
            }
            &:checked + .check {
                border-color: var(--radio-active-background-color);
                @each $name, $pair in $radio-colors {
                    $color: list.nth($pair, 1);
                    &.is-#{$name} {
                        border-color: var(--#{$name});
                    }
                }
                &::before {
                    transform: scale(.5);
                }
            }
            &:focus {
                + .check {
                    box-shadow: 0 0 0.5em var(--grey-light);
                }
                &:checked + .check {
                    box-shadow: 0 0 0.5em rgba(var(--scheme-invert-rgb), 0.1);

                    @each $name, $pair in $radio-colors {
                        $color: list.nth($pair, 1);
                        &.is-#{$name} {
                            --focus-box-shadow-color: #{bulma-utilities.bulmaVarOpacity($name, 0.8)};
                            box-shadow: 0 0 0.5em var(--focus-box-shadow-color);
                        }
                    }
                }
            }
        }
        .control-label {
            @include bulma-utilities.ltr-property("padding", var(--control-padding-horizontal), false);
        }
        &.button {
            display: flex;

            &.is-selected {
                z-index: 1;
            }
        }
        &[disabled] {
            opacity: 0.5;
        }
        &:hover {
            input[type=radio]:not(:disabled) + .check {
                border-color: var(--radio-active-background-color);
                @each $name, $pair in $radio-colors {
                    $color: list.nth($pair, 1);
                    &.is-#{$name} {
                        border-color: var(--#{$name});
                    }
                }
            }
        }
        @include bulma-utilities.control-sizes;
    }
}
